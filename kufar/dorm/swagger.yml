openapi: 3.0.0

info:
  title: Dorm API
  version: 0.1.0
  description: An API for dormitory information
  
servers:
  - url: http://localhost:8080
    description: Preproduction server

paths:

  /signup:
    post:
      
      requestBody:
        description: credentials request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
                


  /student:
    post:

      parameters: 
        - $ref: '#/components/parameters/requestHeader'
      description: Lets a user add a new student
  
      requestBody:
        description: student request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ID:
                  type: integer
                  description: The id of the student
                Firstname:
                  type: string
                  description: The name of the student
                Lastname:
                  type: string
                  description: The lastname of the student  
                Date:
                  type: string
                  description: The date student was created
                UUID:  
                  type: integer
                  description: A unique user id for the student    
                StudRoom:
                  type: object
                  properties:
                    id:
                      type: integer
                    room: 
                      type: integer
                      description:  Room number
                StudFloor:
                    type: object
                    properties:
                      id:
                        type: integer
                      floor: 
                        type: integer
                        description:  floor number     
  
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
          
  /student/{id}:
    get:

      parameters: 
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user view one student
      responses:
        '200':
          $ref: '#/components/responses/student'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  

    put:

      parameters: 
        - $ref: '#/components/parameters/requestHeader'
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user update a student

      requestBody:
        description: students requestBody
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ID:
                  type: integer
                  description: The id of the student
                Firstname:
                  type: string
                  description: The name of the student
                Lastname:
                  type: string
                  description: The lastname of the student  
                Date:
                  type: string
                  description: The date student was created
                UUID:  
                  type: integer
                  description: A unique user id for the student    
                StudRoom:
                  type: object
                  properties:
                    id:
                      type: integer
                    room: 
                      type: integer
                      description:  Room number
                StudFloor:
                    type: object
                    properties:
                      id:
                        type: integer
                      floor: 
                        type: integer
                        description:  floor number     


      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  


    delete:     

      parameters: 
        - $ref: '#/components/parameters/requestHeader'
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user delete a student

      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  

          
  /provisions:
    post:
          
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user add a new provision
      
      requestBody:
        description: students requestBody
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Students id
                bedhseet:
                  type: string
                  description: number of bedhseets
                pillow:
                  type: string
                  description: number of pillows
                towel:
                  type: string
                  description: number of towels
                blanket:
                  type: string
                  description: number of blankets
                curtain:      
                  type: string    
    
            
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
   
   
  /provisions/{id}:
    get:
            
      parameters: 
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user view one student
    
      responses:
        '200':
          $ref: '#/components/responses/provision'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
            
    put:
            
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
      description: Lets a user update a student
        
      requestBody:
        description: students requestBody
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Students id
                bedhseet:
                  type: string
                  description: number of bedhseets
                pillow:
                  type: string
                  description: number of pillows
                towel:
                  type: string
                  description: number of towels
                blanket:
                  type: string
                  description: number of blankets
                curtain:      
                  type: string    
            
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
            
            
    delete:     
            
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
      description: Lets a user delete a student
            
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'          

  /room:
    post:
          
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user add a new room
      
      requestBody:
        description: post request body for room
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: room id
                room:
                  type: string
                  description: room number
                chairs:
                  type: string
                  description: number of chairs
                tables:
                  type: string
                  description: number of tables
                shelves:
                  type: string
                  description: number of blankets
              
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
          
          
  /room/{id}:        
    get:
          
      parameters: 
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user view one room
  
      responses:
        '200':
          $ref: '#/components/responses/room'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
          
    put:
          
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
      description: Lets a user update a room
      
      requestBody:
        description: put request body for room
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: room id
                room:
                  type: string
                  description: room number
                chairs:
                  type: string
                  description: number of chairs
                tables:
                  type: string
                  description: number of tables
                shelves:
                  type: string
                  description: number of blankets
          
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
          
          
    delete:     
          
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
      description: Lets a user delete a room
          
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'          
          
  /worker:
    post:
          
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user add a new worker
      
      requestBody:
        description: put request body for room
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: worker id
                firstname:
                  type: string
                  description: workers firstname
                lastname:
                  type: string
                  description: workers lastname
                Workfloor:
                  type: object
                  properties:
                    id:
                      type: integer
                    Floor:
                      type: object
                      properties:
                        id:
                          type: integer
                        code: 
                          type: integer
                          description:  floor code
                Workdays:
                  type: string
                  description: workers working days
            
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
          
  
  /worker/{id}:        
    get:
          
      parameters: 
        - $ref: '#/components/parameters/urlParam'
      description: Lets a user view one worker
  
      responses:
        '200':
          $ref: '#/components/responses/worker'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
          
    put:
          
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
      description: Lets a user update a worker
      
      requestBody:
        description: put request body for room
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: worker id
                firstname:
                  type: string
                  description: workers firstname
                lastname:
                  type: string
                  description: workers lastname
                Workfloor:
                  type: object
                  properties:
                    id:
                      type: integer
                    Floor:
                      type: object
                      properties:
                        id:
                          type: integer
                        code: 
                          type: integer
                          description:  floor code
                Workdays:
                  type: string
                  description: workers working days
          
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'  
          
          
    delete:     
          
      parameters: 
        - $ref: '#/components/parameters/requestHeader'
      description: Lets a user delete a worker
          
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref:  '#/components/responses/StatusUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'          
          
          
          
components:

  parameters:

    requestHeader:
      in: header
      name: Authorizatio n
      schema:
        type: string
        example: Basic oWVzflDrjRHBVuH0I=
      required: true
      description: Basic + base64    
   
    urlParam:
      in: path   
      name: id
      schema:
        type: integer
        example: 1
      required: true  
  
  responses:

    StatusUnauthorized:
      description: Status Unauthorized
      content:
        application/json:
          examples:
            Internal Server Error:
              description: Status Unauthorized
              value:
                code: integer
                http:
                  message: Status Unauthorized
                  code: 401    
                   
    BadRequestError:
      description: Bad request
      content:
        application/json:
          examples:
            Bad json request:
              description: Eror unmarshalling json
              value:
                code: integer
                http:
                  message: Bad Request
                  code: 400

    StatusOK:
      description: Status OK
      content:
        application/json:
          examples:
            Status OK:
              description: Status OK
              value:
                code: string
                http:
                  message: Status OK
                  code: 200   

    student:  
      description: student
      content:
        application/json:
          schema:
            type: object
            properties:
              ID:
                type: string
                description: The id of the student
              Firstname:
                type: string
                description: The name of the student
              Lastname:
                type: string
                description: The lastname of the student  
              Date:
                type: string
                description: The date student was created
              UUID:  
                type: string
                description: A unique user id for the student    
              StudRoom:
                type: object
                properties:
                  id:
                    type: integer
                  room: 
                    type: integer
                    description:  Room number
              StudFloor:
                  type: object
                  properties:
                    id:
                      type: integer
                    floor: 
                      type: integer
                      description:  floor number                  

    provision:
      description: students provisions
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                description: Students id
              bedhseet:
                type: string
                description: number of bedhseets
              pillow:
                type: string
                description: number of pillows
              towel:
                type: string
                description: number of towels
              blanket:
                type: string
                description: number of blankets
              curtain:      
                type: string
                description: number of curtains
                
    room:
      description: students room
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                description: room id
              room:
                type: string
                description: room number
              chairs:
                type: string
                description: number of chairs
              tables:
                type: string
                description: number of tables
              shelves:
                type: string
                description: number of blankets
                
    worker:
      description:  worker in dorm
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                description: worker id
              firstname:
                type: string
                description: workers firstname
              lastname:
                type: string
                description: workers lastname
              Workfloor:
                type: object
                properties:
                  id:
                    type: integer
                  Floor:
                    type: object
                    properties:
                      id:
                        type: integer
                      code: 
                        type: integer
                        description:  floor code
              Workdays:
                type: string
                description: workers working days          

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          examples:
            Internal Server Error:
              description: Internal Server Error
              value:
                code: string
                http:
                  message: Internal Server Error
                  code: 500       